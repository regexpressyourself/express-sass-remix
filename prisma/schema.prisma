// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  exercises    Exercise[]
  workouts     Workout[]
  routines     Routine[]
  sets         WorkoutSet[]
  phone        String?    @unique
  username     String     @unique
  passwordHash String
}

model Routine {
  id          String               @id @default(uuid())
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  routineUser String
  user        User                 @relation(fields: [routineUser], references: [id], onDelete: Cascade)
  workouts    Workout[]
  exercises Exercise[]
  workoutOrder Json?
  exerciseOrder Json?
  name        String
}

model Workout {
  id          String                @id @default(uuid())
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  workoutUser String
  user        User                  @relation(fields: [workoutUser], references: [id], onDelete: Cascade)
  workoutRoutine String
  routine    Routine @relation(fields: [workoutRoutine], references: [id], onDelete: Cascade)
  exercises   Exercise[]
  exerciseOrder Json?
  sets        WorkoutSet[]
  name        String
}

model WorkoutSet {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  setWorkout  String
  workout     Workout  @relation(fields: [setWorkout], references: [id], onDelete: Cascade)
  setExercise String
  exercise    Exercise @relation(fields: [setExercise], references: [id])
  setUser     String
  user        User     @relation(fields: [setUser], references: [id], onDelete: Cascade)
  isComplete Boolean @default(false)
  setNum      Int
  reps        Int?
  weight      Float?
}

model Exercise {
  id           String                @id @default(uuid())
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  exerciseUser String
  user         User                  @relation(fields: [exerciseUser], references: [id], onDelete: Cascade)
  name         String
  workouts     Workout[]
  routines Routine[]
  notes        String?
  links        String?
  sets         WorkoutSet[]
}


